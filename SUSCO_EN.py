# Generated by Selenium IDE
import pytest
import time
import json
import allure
from SC import take_screenshot
from selenium import webdriver
from selenium.webdriver.common.by import By
from selenium.webdriver.common.action_chains import ActionChains
from selenium.webdriver.support import expected_conditions
from selenium.webdriver.support.wait import WebDriverWait
from selenium.webdriver.common.keys import Keys
from selenium.webdriver.common.desired_capabilities import DesiredCapabilities

class TestREADY100():
  def setup_method(self, method):
    self.driver = webdriver.Remote(command_executor='http://192.168.41.66:4445', desired_capabilities=DesiredCapabilities.CHROME)
    #self.driver = webdriver.Chrome()
    self.driver.maximize_window()
    self.vars = {}
  
  def teardown_method(self, method):
    self.driver.quit()
  
  def wait_for_window(self, timeout = 2):
    time.sleep(round(timeout / 1000))
    wh_now = self.driver.window_handles
    wh_then = self.vars["window_handles"]
    if len(wh_now) > len(wh_then):
      return set(wh_now).difference(set(wh_then)).pop()
  
  def test_1(self):
    try:
      self.driver.get("https://demo.irplus.in.th/Listed/SUSCO/homepage.asp")
      #self.driver.set_window_size(1936, 1056)
      self.driver.find_element(By.CSS_SELECTOR, ".fa").click()
      self.driver.find_element(By.LINK_TEXT, "EN").click()
      self.driver.find_element(By.CSS_SELECTOR, ".fa").click()
      WebDriverWait(self.driver, 30).until(expected_conditions.visibility_of_element_located((By.LINK_TEXT, "HOME")))
      self.driver.find_element(By.LINK_TEXT, "HOME").click()
      self.driver.find_element(By.CSS_SELECTOR, ".fa").click()
      self.driver.find_element(By.LINK_TEXT, "ยอมรับ").click()
      WebDriverWait(self.driver, 30).until(expected_conditions.visibility_of_element_located((By.CSS_SELECTOR, ".parallax")))
      elements = self.driver.find_elements(By.CSS_SELECTOR, ".parallax")
      assert len(elements) > 0
      self.driver.find_element(By.ID, "navbarDropdown").click()
      WebDriverWait(self.driver, 30).until(expected_conditions.visibility_of_element_located((By.LINK_TEXT, "CHAIRMAN'S MESSAGE")))
      self.driver.find_element(By.LINK_TEXT, "CHAIRMAN\'S MESSAGE").click()
      time.sleep(2)
      WebDriverWait(self.driver, 30).until(expected_conditions.visibility_of_element_located((By.CSS_SELECTOR, ".big-headSubText")))
      assert self.driver.find_element(By.CSS_SELECTOR, ".big-headSubText").text == "CHAIRMAN'S MESSAGE"
      self.driver.find_element(By.ID, "navbarDropdown").click()
      WebDriverWait(self.driver, 30).until(expected_conditions.visibility_of_element_located((By.LINK_TEXT, "HISTORY")))
      self.driver.find_element(By.LINK_TEXT, "HISTORY").click()
      time.sleep(2)
      WebDriverWait(self.driver, 30).until(expected_conditions.visibility_of_element_located((By.CSS_SELECTOR, ".big-headSubText")))
      assert self.driver.find_element(By.CSS_SELECTOR, ".big-headSubText").text == "HISTORY"
      self.driver.find_element(By.ID, "navbarDropdown").click()
      WebDriverWait(self.driver, 30).until(expected_conditions.visibility_of_element_located((By.LINK_TEXT, "VISION / MISSION")))
      self.driver.find_element(By.LINK_TEXT, "VISION / MISSION").click()
      time.sleep(2)
      WebDriverWait(self.driver, 30).until(expected_conditions.visibility_of_element_located((By.CSS_SELECTOR, ".big-headSubText")))
      assert self.driver.find_element(By.CSS_SELECTOR, ".big-headSubText").text == "VISION / MISSION"
      self.driver.find_element(By.ID, "navbarDropdown").click()
      WebDriverWait(self.driver, 30).until(expected_conditions.visibility_of_element_located((By.LINK_TEXT, "BUSINESS STRUCTURE")))
      self.driver.find_element(By.LINK_TEXT, "BUSINESS STRUCTURE").click()
      time.sleep(2)
      WebDriverWait(self.driver, 30).until(expected_conditions.visibility_of_element_located((By.CSS_SELECTOR, ".big-headSubText")))
      assert self.driver.find_element(By.CSS_SELECTOR, ".big-headSubText").text == "BUSINESS STRUCTURE"
      self.driver.find_element(By.ID, "navbarDropdown").click()
      WebDriverWait(self.driver, 30).until(expected_conditions.visibility_of_element_located((By.LINK_TEXT, "BOARD OF DIRECTORS")))
      self.driver.find_element(By.LINK_TEXT, "BOARD OF DIRECTORS").click()
      time.sleep(2)
      WebDriverWait(self.driver, 30).until(expected_conditions.visibility_of_element_located((By.CSS_SELECTOR, ".big-headSubText")))
      assert self.driver.find_element(By.CSS_SELECTOR, ".big-headSubText").text == "BOARD OF DIRECTORS"
      self.driver.find_element(By.ID, "navbarDropdown").click()
      WebDriverWait(self.driver, 30).until(expected_conditions.visibility_of_element_located((By.LINK_TEXT, "MANAGEMENT TEAM")))
      self.driver.find_element(By.LINK_TEXT, "MANAGEMENT TEAM").click()
      time.sleep(2)
      WebDriverWait(self.driver, 30).until(expected_conditions.visibility_of_element_located((By.CSS_SELECTOR, ".big-headSubText")))
      assert self.driver.find_element(By.CSS_SELECTOR, ".big-headSubText").text == "MANAGEMENT TEAM"
      self.driver.find_element(By.ID, "navbarDropdown").click()
      WebDriverWait(self.driver, 30).until(expected_conditions.visibility_of_element_located((By.LINK_TEXT, "ORGANIZATIONAL STRUCTURE")))
      self.driver.find_element(By.LINK_TEXT, "ORGANIZATIONAL STRUCTURE").click()
      time.sleep(2)
      WebDriverWait(self.driver, 30).until(expected_conditions.visibility_of_element_located((By.CSS_SELECTOR, ".big-headSubText")))
      assert self.driver.find_element(By.CSS_SELECTOR, ".big-headSubText").text == "ORGANIZATIONAL STRUCTURE"
      self.driver.find_element(By.ID, "navbarDropdown").click()
      WebDriverWait(self.driver, 30).until(expected_conditions.visibility_of_element_located((By.LINK_TEXT, "CSR")))
      self.driver.find_element(By.LINK_TEXT, "CSR").click()
      time.sleep(2)
      WebDriverWait(self.driver, 30).until(expected_conditions.visibility_of_element_located((By.CSS_SELECTOR, ".big-headSubText")))
      assert self.driver.find_element(By.CSS_SELECTOR, ".big-headSubText").text == "CSR"
      self.driver.find_element(By.ID, "navbarDropdown").click()
      WebDriverWait(self.driver, 30).until(expected_conditions.visibility_of_element_located((By.LINK_TEXT, "CORPORATE GOVERNANCE")))
      self.driver.find_element(By.LINK_TEXT, "CORPORATE GOVERNANCE").click()
      time.sleep(2)
      WebDriverWait(self.driver, 30).until(expected_conditions.visibility_of_element_located((By.CSS_SELECTOR, ".big-headSubText")))
      assert self.driver.find_element(By.CSS_SELECTOR, ".big-headSubText").text == "CORPORATE GOVERNANCE"
      self.driver.find_element(By.ID, "navbarDropdown").click()
      WebDriverWait(self.driver, 30).until(expected_conditions.visibility_of_element_located((By.LINK_TEXT, "FUTURE INVESTMENT")))
      self.driver.find_element(By.LINK_TEXT, "FUTURE INVESTMENT").click()
      time.sleep(2)
      WebDriverWait(self.driver, 30).until(expected_conditions.visibility_of_element_located((By.CSS_SELECTOR, ".big-headSubText")))
      assert self.driver.find_element(By.CSS_SELECTOR, ".big-headSubText").text == "FUTURE INVESTMENT"
      self.driver.find_element(By.LINK_TEXT, "PRODUCTS SERVICE").click()
      WebDriverWait(self.driver, 30).until(expected_conditions.visibility_of_element_located((By.LINK_TEXT, "OIL")))
      self.driver.find_element(By.LINK_TEXT, "OIL").click()
      time.sleep(2)
      WebDriverWait(self.driver, 30).until(expected_conditions.visibility_of_element_located((By.CSS_SELECTOR, ".big-headSubText")))
      assert self.driver.find_element(By.CSS_SELECTOR, ".big-headSubText").text == "OIL"
      self.driver.find_element(By.LINK_TEXT, "PRODUCTS SERVICE").click()
      WebDriverWait(self.driver, 30).until(expected_conditions.visibility_of_element_located((By.LINK_TEXT, "STATIONS")))
      self.driver.find_element(By.LINK_TEXT, "STATIONS").click()
      time.sleep(2)
      WebDriverWait(self.driver, 30).until(expected_conditions.visibility_of_element_located((By.CSS_SELECTOR, ".big-headSubText")))
      assert self.driver.find_element(By.CSS_SELECTOR, ".big-headSubText").text == "STATIONS"
      self.driver.find_element(By.LINK_TEXT, "PRODUCTS SERVICE").click()
      WebDriverWait(self.driver, 30).until(expected_conditions.visibility_of_element_located((By.LINK_TEXT, "SUSCO SQUARE")))
      self.driver.find_element(By.LINK_TEXT, "SUSCO SQUARE").click()
      time.sleep(2)
      WebDriverWait(self.driver, 30).until(expected_conditions.visibility_of_element_located((By.CSS_SELECTOR, ".big-headSubText")))
      assert self.driver.find_element(By.CSS_SELECTOR, ".big-headSubText").text == "SUSCO SQUARE"
      WebDriverWait(self.driver, 30).until(expected_conditions.visibility_of_element_located((By.LINK_TEXT, "PROMOTIONS")))
      self.driver.find_element(By.LINK_TEXT, "PROMOTIONS").click()
      time.sleep(2)
      WebDriverWait(self.driver, 30).until(expected_conditions.visibility_of_element_located((By.CSS_SELECTOR, ".big-headSubText")))
      assert self.driver.find_element(By.CSS_SELECTOR, ".big-headSubText").text == "PROMOTIONS"
      self.driver.find_element(By.LINK_TEXT, "INVESTOR RELATIONS").click()
      WebDriverWait(self.driver, 30).until(expected_conditions.visibility_of_element_located((By.CSS_SELECTOR, ".dropdown-menu-right > li:nth-child(1) > .dropdown-item")))
      self.driver.find_element(By.CSS_SELECTOR, ".dropdown-menu-right > li:nth-child(1) > .dropdown-item").click()
      time.sleep(2)
      WebDriverWait(self.driver, 30).until(expected_conditions.visibility_of_element_located((By.CSS_SELECTOR, ".big-headSubText")))
      elements = self.driver.find_elements(By.CSS_SELECTOR, ".big-headSubText")
      assert len(elements) > 0
      self.driver.find_element(By.LINK_TEXT, "INVESTOR RELATIONS").click()
      element = self.driver.find_element(By.CSS_SELECTOR, "body")
      actions = ActionChains(self.driver)
      actions.move_to_element(element).perform()
      element = self.driver.find_element(By.CSS_SELECTOR, ".dropdown-menu-right > li:nth-child(2) > .dropdown-item")
      actions = ActionChains(self.driver)
      actions.move_to_element(element).perform()
      WebDriverWait(self.driver, 30).until(expected_conditions.visibility_of_element_located((By.CSS_SELECTOR, ".dropdown-menu-right > li:nth-child(2) > .dropdown-item")))
      self.driver.find_element(By.CSS_SELECTOR, ".dropdown-menu-right > li:nth-child(2) > .dropdown-item").click()
      time.sleep(2)
      WebDriverWait(self.driver, 30).until(expected_conditions.visibility_of_element_located((By.XPATH, "//a[contains(text(),\'Financial Statement\')]")))
      self.driver.find_element(By.XPATH, "//a[contains(text(),\'Financial Statement\')]").click()
      WebDriverWait(self.driver, 30).until(expected_conditions.visibility_of_element_located((By.CSS_SELECTOR, ".big-headSubText")))
      assert self.driver.find_element(By.CSS_SELECTOR, ".big-headSubText").text == "FINANCIAL STATEMENT"
      time.sleep(2)
      self.driver.find_element(By.LINK_TEXT, "INVESTOR RELATIONS").click()
      element = self.driver.find_element(By.CSS_SELECTOR, "body")
      actions = ActionChains(self.driver)
      actions.move_to_element(element).perform()
      element = self.driver.find_element(By.CSS_SELECTOR, ".dropdown-menu-right > li:nth-child(2) > .dropdown-item")
      actions = ActionChains(self.driver)
      actions.move_to_element(element).perform()
      WebDriverWait(self.driver, 30).until(expected_conditions.visibility_of_element_located((By.CSS_SELECTOR, ".dropdown-menu-right > li:nth-child(2) > .dropdown-item")))
      time.sleep(2)
      self.driver.find_element(By.CSS_SELECTOR, ".dropdown-menu-right > li:nth-child(2) > .dropdown-item").click()
      WebDriverWait(self.driver, 30).until(expected_conditions.visibility_of_element_located((By.XPATH, "//a[contains(text(),\'Financial Highlights\')]")))
      self.driver.find_element(By.XPATH, "//a[contains(text(),\'Financial Highlights\')]").click()
      WebDriverWait(self.driver, 30).until(expected_conditions.visibility_of_element_located((By.CSS_SELECTOR, ".big-headSubText")))
      assert self.driver.find_element(By.CSS_SELECTOR, ".big-headSubText").text == "Financial Highlight"
      self.driver.find_element(By.LINK_TEXT, "INVESTOR RELATIONS").click()
      element = self.driver.find_element(By.CSS_SELECTOR, "body")
      actions = ActionChains(self.driver)
      actions.move_to_element(element).perform()
      element = self.driver.find_element(By.CSS_SELECTOR, ".dropdown-menu-right > li:nth-child(2) > .dropdown-item")
      actions = ActionChains(self.driver)
      actions.move_to_element(element).perform()
      WebDriverWait(self.driver, 30).until(expected_conditions.visibility_of_element_located((By.CSS_SELECTOR, ".dropdown-menu-right > li:nth-child(2) > .dropdown-item")))
      self.driver.find_element(By.CSS_SELECTOR, ".dropdown-menu-right > li:nth-child(2) > .dropdown-item").click()
      time.sleep(2)
      WebDriverWait(self.driver, 30).until(expected_conditions.visibility_of_element_located((By.LINK_TEXT, "MD&A")))
      self.driver.find_element(By.LINK_TEXT, "MD&A").click()
      WebDriverWait(self.driver, 30).until(expected_conditions.visibility_of_element_located((By.CSS_SELECTOR, ".big-headSubText")))
      assert self.driver.find_element(By.CSS_SELECTOR, ".big-headSubText").text == "MD&A"
      self.driver.find_element(By.LINK_TEXT, "INVESTOR RELATIONS").click()
      element = self.driver.find_element(By.CSS_SELECTOR, "body")
      actions = ActionChains(self.driver)
      actions.move_to_element(element).perform()
      element = self.driver.find_element(By.CSS_SELECTOR, ".dropdown-menu-right > li:nth-child(2) > .dropdown-item")
      actions = ActionChains(self.driver)
      actions.move_to_element(element).perform()
      WebDriverWait(self.driver, 30).until(expected_conditions.visibility_of_element_located((By.CSS_SELECTOR, ".dropdown-menu-right > li:nth-child(2) > .dropdown-item")))
      self.driver.find_element(By.CSS_SELECTOR, ".dropdown-menu-right > li:nth-child(2) > .dropdown-item").click()
      WebDriverWait(self.driver, 30).until(expected_conditions.visibility_of_element_located((By.CSS_SELECTOR, "li:nth-child(2) li:nth-child(4) > .dropdown-item")))
      self.driver.find_element(By.CSS_SELECTOR, "li:nth-child(2) li:nth-child(4) > .dropdown-item").click()
      WebDriverWait(self.driver, 30).until(expected_conditions.visibility_of_element_located((By.CSS_SELECTOR, ".big-headSubText")))
      assert self.driver.find_element(By.CSS_SELECTOR, ".big-headSubText").text == "Annual Report"
      time.sleep(2)
      self.driver.find_element(By.LINK_TEXT, "INVESTOR RELATIONS").click()
      element = self.driver.find_element(By.CSS_SELECTOR, "body")
      actions = ActionChains(self.driver)
      actions.move_to_element(element).perform()
      element = self.driver.find_element(By.CSS_SELECTOR, ".dropdown-menu-right > li:nth-child(2) > .dropdown-item")
      actions = ActionChains(self.driver)
      actions.move_to_element(element).perform()
      WebDriverWait(self.driver, 30).until(expected_conditions.visibility_of_element_located((By.CSS_SELECTOR, ".dropdown-menu-right > li:nth-child(2) > .dropdown-item")))
      self.driver.find_element(By.CSS_SELECTOR, ".dropdown-menu-right > li:nth-child(2) > .dropdown-item").click()
      WebDriverWait(self.driver, 30).until(expected_conditions.visibility_of_element_located((By.CSS_SELECTOR, "li:nth-child(2) li:nth-child(5) > .dropdown-item")))
      self.driver.find_element(By.CSS_SELECTOR, "li:nth-child(2) li:nth-child(5) > .dropdown-item").click()
      WebDriverWait(self.driver, 30).until(expected_conditions.visibility_of_element_located((By.CSS_SELECTOR, ".big-headSubText")))
      assert self.driver.find_element(By.CSS_SELECTOR, ".big-headSubText").text == "FORM 56-1"
      time.sleep(2)
      self.driver.find_element(By.LINK_TEXT, "INVESTOR RELATIONS").click()
      element = self.driver.find_element(By.CSS_SELECTOR, "body")
      actions = ActionChains(self.driver)
      actions.move_to_element(element).perform()
      element = self.driver.find_element(By.CSS_SELECTOR, ".dropdown-menu-right > li:nth-child(2) > .dropdown-item")
      actions = ActionChains(self.driver)
      actions.move_to_element(element).perform()
      WebDriverWait(self.driver, 30).until(expected_conditions.visibility_of_element_located((By.CSS_SELECTOR, ".dropdown-menu-right > li:nth-child(2) > .dropdown-item")))
      self.driver.find_element(By.CSS_SELECTOR, ".dropdown-menu-right > li:nth-child(2) > .dropdown-item").click()
      self.vars["window_handles"] = self.driver.window_handles
      self.driver.find_element(By.CSS_SELECTOR, ".submenu > li:nth-child(6) > .dropdown-item").click()
      self.vars["win8174"] = self.wait_for_window(2000)
      self.vars["root"] = self.driver.current_window_handle
      self.driver.switch_to.window(self.vars["win8174"])
      self.driver.close()
      self.driver.switch_to.window(self.vars["root"])
      element = self.driver.find_element(By.CSS_SELECTOR, "body")
      actions = ActionChains(self.driver)
      actions.move_to_element(element).perform()
      element = self.driver.find_element(By.CSS_SELECTOR, ".dropdown-menu-right > li:nth-child(3) > .dropdown-item")
      actions = ActionChains(self.driver)
      actions.move_to_element(element).perform()
      time.sleep(2)
      WebDriverWait(self.driver, 30).until(expected_conditions.visibility_of_element_located((By.CSS_SELECTOR, ".dropdown-menu-right > li:nth-child(3) > .dropdown-item")))
      self.driver.find_element(By.CSS_SELECTOR, ".dropdown-menu-right > li:nth-child(3) > .dropdown-item").click()
      WebDriverWait(self.driver, 30).until(expected_conditions.visibility_of_element_located((By.CSS_SELECTOR, "li:nth-child(3) li:nth-child(1) > .dropdown-item")))
      self.driver.find_element(By.CSS_SELECTOR, "li:nth-child(3) li:nth-child(1) > .dropdown-item").click()
      time.sleep(2)
      WebDriverWait(self.driver, 30).until(expected_conditions.visibility_of_element_located((By.CSS_SELECTOR, ".big-headSubText")))
      assert self.driver.find_element(By.CSS_SELECTOR, ".big-headSubText").text == "STOCK QUOTE"
      self.driver.find_element(By.LINK_TEXT, "INVESTOR RELATIONS").click()
      element = self.driver.find_element(By.CSS_SELECTOR, "body")
      actions = ActionChains(self.driver)
      actions.move_to_element(element).perform()
      element = self.driver.find_element(By.CSS_SELECTOR, ".dropdown-menu-right > li:nth-child(3) > .dropdown-item")
      actions = ActionChains(self.driver)
      actions.move_to_element(element).perform()
      WebDriverWait(self.driver, 30).until(expected_conditions.visibility_of_element_located((By.CSS_SELECTOR, ".dropdown-menu-right > li:nth-child(3) > .dropdown-item")))
      self.driver.find_element(By.CSS_SELECTOR, ".dropdown-menu-right > li:nth-child(3) > .dropdown-item").click()
      time.sleep(2)
      WebDriverWait(self.driver, 30).until(expected_conditions.visibility_of_element_located((By.CSS_SELECTOR, "li:nth-child(3) li:nth-child(2) > .dropdown-item")))
      self.driver.find_element(By.CSS_SELECTOR, "li:nth-child(3) li:nth-child(2) > .dropdown-item").click()
      WebDriverWait(self.driver, 30).until(expected_conditions.visibility_of_element_located((By.CSS_SELECTOR, ".symbol")))
      assert self.driver.find_element(By.CSS_SELECTOR, ".symbol").text == "SUSCO"
      time.sleep(5)
      self.driver.execute_script("window.history.go(-1)")
      element = self.driver.find_element(By.CSS_SELECTOR, "body")
      actions = ActionChains(self.driver)
      actions.move_to_element(element).perform()
      element = self.driver.find_element(By.CSS_SELECTOR, ".dropdown-menu-right > li:nth-child(3) > .dropdown-item")
      actions = ActionChains(self.driver)
      actions.move_to_element(element).perform()
      WebDriverWait(self.driver, 30).until(expected_conditions.visibility_of_element_located((By.CSS_SELECTOR, ".dropdown-menu-right > li:nth-child(3) > .dropdown-item")))
      self.driver.find_element(By.CSS_SELECTOR, ".dropdown-menu-right > li:nth-child(3) > .dropdown-item").click()
      WebDriverWait(self.driver, 30).until(expected_conditions.visibility_of_element_located((By.CSS_SELECTOR, "li:nth-child(3) li:nth-child(3) > .dropdown-item")))
      self.driver.find_element(By.CSS_SELECTOR, "li:nth-child(3) li:nth-child(3) > .dropdown-item").click()
      time.sleep(2)
      WebDriverWait(self.driver, 30).until(expected_conditions.visibility_of_element_located((By.CSS_SELECTOR, ".big-headSubText")))
      assert self.driver.find_element(By.CSS_SELECTOR, ".big-headSubText").text == "INVESTMENT CALCULATOR"
      self.driver.find_element(By.LINK_TEXT, "INVESTOR RELATIONS").click()
      WebDriverWait(self.driver, 30).until(expected_conditions.visibility_of_element_located((By.CSS_SELECTOR, ".dropdown-menu-right > li:nth-child(1) > .dropdown-item")))
      self.driver.find_element(By.CSS_SELECTOR, ".dropdown-menu-right > li:nth-child(1) > .dropdown-item").click()
      self.driver.find_element(By.LINK_TEXT, "INVESTOR RELATIONS").click()
      element = self.driver.find_element(By.CSS_SELECTOR, "body")
      actions = ActionChains(self.driver)
      actions.move_to_element(element).perform()
      element = self.driver.find_element(By.CSS_SELECTOR, "li:nth-child(4) > .dropdown-toggle")
      actions = ActionChains(self.driver)
      actions.move_to_element(element).perform()
      WebDriverWait(self.driver, 30).until(expected_conditions.visibility_of_element_located((By.CSS_SELECTOR, "li:nth-child(4) > .dropdown-toggle")))
      self.driver.find_element(By.CSS_SELECTOR, "li:nth-child(4) > .dropdown-toggle").click()
      WebDriverWait(self.driver, 30).until(expected_conditions.visibility_of_element_located((By.CSS_SELECTOR, "li:nth-child(4) li:nth-child(1) > .dropdown-item")))
      self.driver.find_element(By.CSS_SELECTOR, "li:nth-child(4) li:nth-child(1) > .dropdown-item").click()
      time.sleep(2)
      WebDriverWait(self.driver, 30).until(expected_conditions.visibility_of_element_located((By.CSS_SELECTOR, ".big-headSubText")))
      assert self.driver.find_element(By.CSS_SELECTOR, ".big-headSubText").text == "Information for The Warrants Holders"
      self.driver.find_element(By.LINK_TEXT, "INVESTOR RELATIONS").click()
      element = self.driver.find_element(By.CSS_SELECTOR, "body")
      actions = ActionChains(self.driver)
      actions.move_to_element(element).perform()
      element = self.driver.find_element(By.CSS_SELECTOR, "li:nth-child(4) > .dropdown-toggle")
      actions = ActionChains(self.driver)
      actions.move_to_element(element).perform()
      WebDriverWait(self.driver, 30).until(expected_conditions.visibility_of_element_located((By.CSS_SELECTOR, "li:nth-child(4) > .dropdown-toggle")))
      self.driver.find_element(By.CSS_SELECTOR, "li:nth-child(4) > .dropdown-toggle").click()
      WebDriverWait(self.driver, 30).until(expected_conditions.visibility_of_element_located((By.CSS_SELECTOR, "li:nth-child(4) li:nth-child(2) > .dropdown-item")))
      self.driver.find_element(By.CSS_SELECTOR, "li:nth-child(4) li:nth-child(2) > .dropdown-item").click()
      WebDriverWait(self.driver, 30).until(expected_conditions.visibility_of_element_located((By.CSS_SELECTOR, ".big-headSubText")))
      assert self.driver.find_element(By.CSS_SELECTOR, ".big-headSubText").text == "MAJOR SHAREHOLDER"
      self.driver.find_element(By.LINK_TEXT, "INVESTOR RELATIONS").click()
      element = self.driver.find_element(By.CSS_SELECTOR, "body")
      actions = ActionChains(self.driver)
      actions.move_to_element(element).perform()
      element = self.driver.find_element(By.CSS_SELECTOR, "li:nth-child(4) > .dropdown-toggle")
      actions = ActionChains(self.driver)
      actions.move_to_element(element).perform()
      WebDriverWait(self.driver, 30).until(expected_conditions.visibility_of_element_located((By.CSS_SELECTOR, "li:nth-child(4) > .dropdown-toggle")))
      self.driver.find_element(By.CSS_SELECTOR, "li:nth-child(4) > .dropdown-toggle").click()
      WebDriverWait(self.driver, 30).until(expected_conditions.visibility_of_element_located((By.CSS_SELECTOR, "li:nth-child(4) li:nth-child(3) > .dropdown-item")))
      self.driver.find_element(By.CSS_SELECTOR, "li:nth-child(4) li:nth-child(3) > .dropdown-item").click()
      WebDriverWait(self.driver, 30).until(expected_conditions.visibility_of_element_located((By.CSS_SELECTOR, ".big-headSubText")))
      assert self.driver.find_element(By.CSS_SELECTOR, ".big-headSubText").text == "MEETING OF SHAREHOLDER"
      self.driver.find_element(By.LINK_TEXT, "INVESTOR RELATIONS").click()
      element = self.driver.find_element(By.CSS_SELECTOR, "body")
      actions = ActionChains(self.driver)
      actions.move_to_element(element).perform()
      element = self.driver.find_element(By.CSS_SELECTOR, "li:nth-child(4) > .dropdown-toggle")
      actions = ActionChains(self.driver)
      actions.move_to_element(element).perform()
      WebDriverWait(self.driver, 30).until(expected_conditions.visibility_of_element_located((By.CSS_SELECTOR, "li:nth-child(4) > .dropdown-toggle")))
      self.driver.find_element(By.CSS_SELECTOR, "li:nth-child(4) > .dropdown-toggle").click()
      WebDriverWait(self.driver, 30).until(expected_conditions.visibility_of_element_located((By.CSS_SELECTOR, "li:nth-child(4) li:nth-child(4) > .dropdown-item")))
      self.driver.find_element(By.CSS_SELECTOR, "li:nth-child(4) li:nth-child(4) > .dropdown-item").click()
      time.sleep(2)
      WebDriverWait(self.driver, 30).until(expected_conditions.visibility_of_element_located((By.CSS_SELECTOR, ".big-headSubText")))
      assert self.driver.find_element(By.CSS_SELECTOR, ".big-headSubText").text == "DIVIDEND POLICY"
      self.driver.find_element(By.LINK_TEXT, "INVESTOR RELATIONS").click()
      element = self.driver.find_element(By.CSS_SELECTOR, "body")
      actions = ActionChains(self.driver)
      actions.move_to_element(element).perform()
      element = self.driver.find_element(By.CSS_SELECTOR, "li:nth-child(4) > .dropdown-toggle")
      actions = ActionChains(self.driver)
      actions.move_to_element(element).perform()
      WebDriverWait(self.driver, 30).until(expected_conditions.visibility_of_element_located((By.CSS_SELECTOR, "li:nth-child(4) > .dropdown-toggle")))
      self.driver.find_element(By.CSS_SELECTOR, "li:nth-child(4) > .dropdown-toggle").click()
      WebDriverWait(self.driver, 30).until(expected_conditions.visibility_of_element_located((By.CSS_SELECTOR, "li:nth-child(4) li:nth-child(5) > .dropdown-item")))
      self.driver.find_element(By.CSS_SELECTOR, "li:nth-child(4) li:nth-child(5) > .dropdown-item").click()
      self.driver.execute_script("window.history.go(-1)")
      WebDriverWait(self.driver, 30).until(expected_conditions.visibility_of_element_located((By.CSS_SELECTOR, ".dropdown-menu-right > li:nth-child(5) > .dropdown-item")))
      self.driver.find_element(By.CSS_SELECTOR, ".dropdown-menu-right > li:nth-child(5) > .dropdown-item").click()
      time.sleep(2)
      WebDriverWait(self.driver, 30).until(expected_conditions.visibility_of_element_located((By.CSS_SELECTOR, ".big-headSubText")))
      assert self.driver.find_element(By.CSS_SELECTOR, ".big-headSubText").text == "IR CALENDAR"
      self.driver.find_element(By.LINK_TEXT, "INVESTOR RELATIONS").click()
      WebDriverWait(self.driver, 30).until(expected_conditions.visibility_of_element_located((By.CSS_SELECTOR, ".dropdown-menu-right > li:nth-child(6) > .dropdown-item")))
      self.driver.find_element(By.CSS_SELECTOR, ".dropdown-menu-right > li:nth-child(6) > .dropdown-item").click()
      time.sleep(2)
      WebDriverWait(self.driver, 30).until(expected_conditions.visibility_of_element_located((By.CSS_SELECTOR, ".big-headSubText")))
      assert self.driver.find_element(By.CSS_SELECTOR, ".big-headSubText").text == "WEBCASTS & PRESENTATION"
      self.driver.find_element(By.LINK_TEXT, "INVESTOR RELATIONS").click()
      WebDriverWait(self.driver, 30).until(expected_conditions.visibility_of_element_located((By.CSS_SELECTOR, "li:nth-child(7) > .dropdown-item")))
      self.driver.find_element(By.CSS_SELECTOR, "li:nth-child(7) > .dropdown-item").click()
      time.sleep(2)
      WebDriverWait(self.driver, 30).until(expected_conditions.visibility_of_element_located((By.CSS_SELECTOR, ".big-headSubText")))
      assert self.driver.find_element(By.CSS_SELECTOR, ".big-headSubText").text == "ANALYST REPORT"
      self.driver.find_element(By.LINK_TEXT, "INVESTOR RELATIONS").click()
      element = self.driver.find_element(By.CSS_SELECTOR, "body")
      actions = ActionChains(self.driver)
      actions.move_to_element(element).perform()
      element = self.driver.find_element(By.CSS_SELECTOR, "li:nth-child(8) > .dropdown-item")
      actions = ActionChains(self.driver)
      actions.move_to_element(element).perform()
      WebDriverWait(self.driver, 30).until(expected_conditions.visibility_of_element_located((By.CSS_SELECTOR, "li:nth-child(8) > .dropdown-item")))
      self.driver.find_element(By.CSS_SELECTOR, "li:nth-child(8) > .dropdown-item").click()
      WebDriverWait(self.driver, 30).until(expected_conditions.visibility_of_element_located((By.CSS_SELECTOR, "li:nth-child(8) li:nth-child(1) > .dropdown-item")))
      self.driver.find_element(By.CSS_SELECTOR, "li:nth-child(8) li:nth-child(1) > .dropdown-item").click()
      time.sleep(2)
      WebDriverWait(self.driver, 30).until(expected_conditions.visibility_of_element_located((By.CSS_SELECTOR, ".big-headSubText")))
      assert self.driver.find_element(By.CSS_SELECTOR, ".big-headSubText").text == "SET ANNOUNCEMENT"
      self.driver.find_element(By.LINK_TEXT, "INVESTOR RELATIONS").click()
      element = self.driver.find_element(By.CSS_SELECTOR, "body")
      actions = ActionChains(self.driver)
      actions.move_to_element(element).perform()
      element = self.driver.find_element(By.CSS_SELECTOR, "li:nth-child(8) > .dropdown-item")
      actions = ActionChains(self.driver)
      actions.move_to_element(element).perform()
      WebDriverWait(self.driver, 30).until(expected_conditions.visibility_of_element_located((By.CSS_SELECTOR, "li:nth-child(8) > .dropdown-item")))
      self.driver.find_element(By.CSS_SELECTOR, "li:nth-child(8) > .dropdown-item").click()
      WebDriverWait(self.driver, 30).until(expected_conditions.visibility_of_element_located((By.CSS_SELECTOR, "li:nth-child(8) li:nth-child(2) > .dropdown-item")))
      self.driver.find_element(By.CSS_SELECTOR, "li:nth-child(8) li:nth-child(2) > .dropdown-item").click()
      time.sleep(2)
      WebDriverWait(self.driver, 30).until(expected_conditions.visibility_of_element_located((By.CSS_SELECTOR, ".big-headSubText")))
      assert self.driver.find_element(By.CSS_SELECTOR, ".big-headSubText").text == "NEWS UPDATE"
      self.driver.find_element(By.LINK_TEXT, "INVESTOR RELATIONS").click()
      element = self.driver.find_element(By.CSS_SELECTOR, "body")
      actions = ActionChains(self.driver)
      actions.move_to_element(element).perform()
      element = self.driver.find_element(By.CSS_SELECTOR, "li:nth-child(8) > .dropdown-item")
      actions = ActionChains(self.driver)
      actions.move_to_element(element).perform()
      WebDriverWait(self.driver, 30).until(expected_conditions.visibility_of_element_located((By.CSS_SELECTOR, "li:nth-child(8) > .dropdown-item")))
      self.driver.find_element(By.CSS_SELECTOR, "li:nth-child(8) > .dropdown-item").click()
      WebDriverWait(self.driver, 30).until(expected_conditions.visibility_of_element_located((By.CSS_SELECTOR, "li:nth-child(8) li:nth-child(3) > .dropdown-item")))
      self.driver.find_element(By.CSS_SELECTOR, "li:nth-child(8) li:nth-child(3) > .dropdown-item").click()
      time.sleep(2)
      WebDriverWait(self.driver, 30).until(expected_conditions.visibility_of_element_located((By.CSS_SELECTOR, ".big-headSubText")))
      assert self.driver.find_element(By.CSS_SELECTOR, ".big-headSubText").text == "NEWS CLIPPING"
      self.driver.find_element(By.LINK_TEXT, "INVESTOR RELATIONS").click()
      element = self.driver.find_element(By.CSS_SELECTOR, "body")
      actions = ActionChains(self.driver)
      actions.move_to_element(element).perform()
      element = self.driver.find_element(By.CSS_SELECTOR, "li:nth-child(8) > .dropdown-item")
      actions = ActionChains(self.driver)
      actions.move_to_element(element).perform()
      WebDriverWait(self.driver, 30).until(expected_conditions.visibility_of_element_located((By.CSS_SELECTOR, "li:nth-child(8) > .dropdown-item")))
      self.driver.find_element(By.CSS_SELECTOR, "li:nth-child(8) > .dropdown-item").click()
      WebDriverWait(self.driver, 30).until(expected_conditions.visibility_of_element_located((By.CSS_SELECTOR, "li:nth-child(8) li:nth-child(4) > .dropdown-item")))
      self.driver.find_element(By.CSS_SELECTOR, "li:nth-child(8) li:nth-child(4) > .dropdown-item").click()
      time.sleep(2)
      WebDriverWait(self.driver, 30).until(expected_conditions.visibility_of_element_located((By.CSS_SELECTOR, ".big-headSubText")))
      assert self.driver.find_element(By.CSS_SELECTOR, ".big-headSubText").text == "PUBLIC RELATIONS"
      self.driver.find_element(By.LINK_TEXT, "INVESTOR RELATIONS").click()
      element = self.driver.find_element(By.CSS_SELECTOR, "body")
      actions = ActionChains(self.driver)
      actions.move_to_element(element).perform()
      element = self.driver.find_element(By.CSS_SELECTOR, "li:nth-child(9) > .dropdown-item")
      actions = ActionChains(self.driver)
      actions.move_to_element(element).perform()
      WebDriverWait(self.driver, 30).until(expected_conditions.visibility_of_element_located((By.CSS_SELECTOR, "li:nth-child(9) > .dropdown-item")))
      self.driver.find_element(By.CSS_SELECTOR, "li:nth-child(9) > .dropdown-item").click()
      WebDriverWait(self.driver, 30).until(expected_conditions.visibility_of_element_located((By.CSS_SELECTOR, "li:nth-child(9) li:nth-child(1) > .dropdown-item")))
      self.driver.find_element(By.CSS_SELECTOR, "li:nth-child(9) li:nth-child(1) > .dropdown-item").click()
      time.sleep(2)
      WebDriverWait(self.driver, 30).until(expected_conditions.visibility_of_element_located((By.CSS_SELECTOR, ".big-headSubText")))
      assert self.driver.find_element(By.CSS_SELECTOR, ".big-headSubText").text == "E-Mail Alert"
      self.driver.find_element(By.LINK_TEXT, "INVESTOR RELATIONS").click()
      element = self.driver.find_element(By.CSS_SELECTOR, "body")
      actions = ActionChains(self.driver)
      actions.move_to_element(element).perform()
      element = self.driver.find_element(By.CSS_SELECTOR, "li:nth-child(9) > .dropdown-item")
      actions = ActionChains(self.driver)
      actions.move_to_element(element).perform()
      WebDriverWait(self.driver, 30).until(expected_conditions.visibility_of_element_located((By.CSS_SELECTOR, "li:nth-child(9) > .dropdown-item")))
      self.driver.find_element(By.CSS_SELECTOR, "li:nth-child(9) > .dropdown-item").click()
      WebDriverWait(self.driver, 30).until(expected_conditions.visibility_of_element_located((By.CSS_SELECTOR, "li:nth-child(9) li:nth-child(2) > .dropdown-item")))
      self.driver.find_element(By.CSS_SELECTOR, "li:nth-child(9) li:nth-child(2) > .dropdown-item").click()
      time.sleep(2)
      WebDriverWait(self.driver, 30).until(expected_conditions.visibility_of_element_located((By.CSS_SELECTOR, ".big-headSubText")))
      assert self.driver.find_element(By.CSS_SELECTOR, ".big-headSubText").text == "INQUIRY FORM"
      self.driver.find_element(By.LINK_TEXT, "INVESTOR RELATIONS").click()
      element = self.driver.find_element(By.CSS_SELECTOR, "body")
      actions = ActionChains(self.driver)
      actions.move_to_element(element).perform()
      element = self.driver.find_element(By.CSS_SELECTOR, "li:nth-child(9) > .dropdown-item")
      actions = ActionChains(self.driver)
      actions.move_to_element(element).perform()
      WebDriverWait(self.driver, 30).until(expected_conditions.visibility_of_element_located((By.CSS_SELECTOR, "li:nth-child(9) > .dropdown-item")))
      self.driver.find_element(By.CSS_SELECTOR, "li:nth-child(9) > .dropdown-item").click()
      WebDriverWait(self.driver, 30).until(expected_conditions.visibility_of_element_located((By.CSS_SELECTOR, "li:nth-child(9) li:nth-child(3) > .dropdown-item")))
      self.driver.find_element(By.CSS_SELECTOR, "li:nth-child(9) li:nth-child(3) > .dropdown-item").click()
      time.sleep(2)
      WebDriverWait(self.driver, 30).until(expected_conditions.visibility_of_element_located((By.CSS_SELECTOR, ".big-headSubText")))
      assert self.driver.find_element(By.CSS_SELECTOR, ".big-headSubText").text == "FAQS"
      self.driver.find_element(By.LINK_TEXT, "INVESTOR RELATIONS").click()
      element = self.driver.find_element(By.CSS_SELECTOR, "body")
      actions = ActionChains(self.driver)
      actions.move_to_element(element).perform()
      element = self.driver.find_element(By.CSS_SELECTOR, "li:nth-child(9) > .dropdown-item")
      actions = ActionChains(self.driver)
      actions.move_to_element(element).perform()
      WebDriverWait(self.driver, 30).until(expected_conditions.visibility_of_element_located((By.CSS_SELECTOR, "li:nth-child(9) > .dropdown-item")))
      self.driver.find_element(By.CSS_SELECTOR, "li:nth-child(9) > .dropdown-item").click()
      WebDriverWait(self.driver, 30).until(expected_conditions.visibility_of_element_located((By.CSS_SELECTOR, "li:nth-child(9) li:nth-child(4) > .dropdown-item")))
      self.driver.find_element(By.CSS_SELECTOR, "li:nth-child(9) li:nth-child(4) > .dropdown-item").click()
      time.sleep(2)
      WebDriverWait(self.driver, 30).until(expected_conditions.visibility_of_element_located((By.CSS_SELECTOR, ".big-headSubText")))
      assert self.driver.find_element(By.CSS_SELECTOR, ".big-headSubText").text == "CHANNEL COMPLAINTS"
      self.driver.find_element(By.LINK_TEXT, "INVESTOR RELATIONS").click()
      WebDriverWait(self.driver, 30).until(expected_conditions.visibility_of_element_located((By.CSS_SELECTOR, "li:nth-child(10) > .dropdown-item")))
      self.driver.find_element(By.CSS_SELECTOR, "li:nth-child(10) > .dropdown-item").click()
      time.sleep(2)
      WebDriverWait(self.driver, 30).until(expected_conditions.visibility_of_element_located((By.CSS_SELECTOR, ".big-headSubText")))
      assert self.driver.find_element(By.CSS_SELECTOR, ".big-headSubText").text == "IR Contact"
      time.sleep(2)
    except Exception as e:
      # If an assertion error occurs, capture a screenshot and attach it to the Allure report
      allure.attach(self.driver.get_screenshot_as_png(), name="Error Screenshot", attachment_type=allure.attachment_type.PNG)
      raise e
    
